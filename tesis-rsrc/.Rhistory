)
simu_fits_binom_plan <- evaluate_plan(
plan = simu_fits_binom,
wildcard = "data__",
values = simu_betab_plan$target
)
tail(simu_fits_binom_plan)
get_num_divergent()
a
a$estimates[3,1]
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
endes.fit_plan
simu_fits_plan
loadd(simu.binom.fit_simu.betab.data_0.05_seed0)
simu.binom.fit_simu.betab.data_0.05_seed0
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attributes()
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attributes() %>% names
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attr("model_name")
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attr("inits")
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attr("sim")
attr(simu.binom.fit_simu.betab.data_0.05_seed0, "sim")$dims_oi
attr(simu.binom.fit_simu.betab.data_0.05_seed0, "sim")$dims_oi$log_lik
tab_looic_divergent <- function(fit){
data.frame(model = attr(fit, "model_name"),
N = attr(fit, "sim")$dims_oi$log_lik,
looic = loo(fit)$estimates[3,1],
divergent = get_num_divergent(fit))
}
simu.binom.fit_simu.betab.data_0.05_seed0 %>% tab_looic_divergent()
simu_fits_plan
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = targets, command = commands)
simu_looic
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
simu_looic
simu_fits_plan
simu_fits_plan[1,1]
simu_fits_plan$target[1]
loadd(simu_fits_plan$target[1])
simu.binom.fit_simu.betab.data_0.05_seed0
simu_fits_plan$target
simu_fits_plan$target
loo_tab_plan
simu_looic
simulate(1)
simulate(5)
?simulate(5)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = targets, command = commands)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
commands
simu_looic
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "safsad",
gather = "rbind"
)
loo_tab_plan
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
loo_tab_plan$command
gather_plan
simu_looi
simu_looic
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = commands, command = commands)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
gather_plan
gather_plan <- function (plan = NULL, target = "target", gather = "list")
{
command <- paste(plan$target, "=", plan$command)
command <- paste(command, collapse = ", ")
command <- paste0(gather, "(", command, ")")
tibble(target = target, command = command)
}
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = targets, command = commands)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loadd(looic_tab)
looic_tab
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loadd(looic_tab2)
(looic_tab2)
attributes(looic_tab2)
attributes(looic_tab2)$row.names
attributes(looic_tab2)$row.names <- NULL
(looic_tab2)
looic_tab2
loadd(looic_tab2)
(looic_tab2)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
source(file.path("R", "plan.R"))
make(whole_plan, seed = 1991)
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
config <- drake_config(whole_plan)
vis_drake_graph(config)
loadd(endes.loo.tab)
endes.loo.tab
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
### outputs
loadd(endes.betab.fit)
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loadd(looic_tab)
looic_tab
?loo
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
?loadd
source(file.path("R", "plan.R"))
simu_betab_plan
simu_looic
simu_fits_plan
loadd(simu.binom.fit_simu.betab.data_0.05_seed0)
simu.binom.fit_simu.betab.data_0.05_seed0
extract(simu.binom.fit_simu.betab.data_0.05_seed0, "log_lik")
ll
ll <- extract(simu.binom.fit_simu.betab.data_0.05_seed0, "log_lik")
simu_betab_plan
simu.betab.data_0.05_seed0
loadd(simu.betab.data_0.05_seed0)
simu.betab.data_0.05_seed0
simu.betab.data_0.05_seed0$y
loadd(simu.betab.data_0.05_seed1)
(simu.betab.data_0.05_seed1)
(simu.betab.data_0.05_seed1)$y
simu.betab.data_0.05_seed0$y
loadd(simu.betab.data_0.05_seed2)
simu.betab.data_0.05_seed2$y
table(simu.betab.data_0.05_seed2$y)
(simu.betab.data_0.05_seed3$y)
loadd(simu.betab.data_0.05_seed0)
loadd(simu.binom.fit_simu.betab.data_0.05_seed0)
ll <- extract(simu.binom.fit_simu.betab.data_0.05_seed0, "log_lik")
y  <- simu.betab.data_0.05_seed0$y
k <- lapply(0:7, function(x)which(y==x))
ll
y
k
ll
lapply(k,
function(x){
pk <- exp(ll[1,x])
mk <- length(y[x])
N <- length(y)
sum(((mk - N*pk)/sqrt(N*pk))**2)
})
ll[1,2]
ll
ll$log_lik
ll <- extract(simu.binom.fit_simu.betab.data_0.05_seed0, "log_lik")$log_lik
lapply(k,
function(x){
pk <- exp(ll[1,x])
mk <- length(y[x])
N <- length(y)
sum(((mk - N*pk)/sqrt(N*pk))**2)
})
k
y
RB <- function(ll_samp, y_data, k_which){
lapply(k_which,
function(x){
pk <- exp(ll_samp)
mk <- length(y_data)
sum(((mk - pk)/sqrt(pk))**2)
})
}
ll[1,]
RB(ll[1,], y, k)
k
rm(pk)
rm(mk)
RB(ll[1,], y, k)
pk
exp(ll[1,])
pk <- exp(ll[1,])
p
pk
sum(pk)
mk
?mk
mk()
y
length(y)
sum_(pk)
pk
sum(pk)
sqrt(pk)
100 - pk
(100 - pk)/sqrt(pk)
((100 - pk)/sqrt(pk))**2
sum((100 - pk)/sqrt(pk))**2
pk
range(pk)
mk
mk <- 100
mk
mk - pk
(mk - pk)/sqrt(pk)
((mk - pk)/sqrt(pk))**2
sum(((mk - pk)/sqrt(pk))**2)
RB <- function(ll_samp, y_data, k_which){
lapply(k_which,
function(x){
pk <- sum(exp(ll_samp))
mk <- length(y_data)
sum(((mk - pk)/sqrt(pk))**2)
})
}
RB(ll[1,], y, k)
pl
pk
pl <- sum(exp(ll_samp))
pk <- sum(exp(ll[1,]))
pk
mk
(mk - pk)
k
RB <- function(ll_samp, y_data, k_which){
lapply(k_which,
function(x){
pk <- sum(exp(ll_samp[x]))
mk <- length(y_data)
sum(((mk - pk)/sqrt(pk))**2)
})
}
RB(ll[1,], y, k)
k_which
RB <- function(ll_samp, k_which){
lapply(k_which,
function(x){
pk <- sum(exp(ll_samp[x]))
mk <- length(k_which)
sum(((mk - pk)/sqrt(pk))**2)
})
}
k
RB(ll[1,], y, k)
k
RB(ll[1,], k)
RB <- function(ll_samp, k_which){
lapply(k_which,
function(x){
pk <- sum(exp(ll_samp[x]))
mk <- length(k_which)
sum(((mk - pk)/sqrt(pk))**2)
})
}
RB(ll[1,], k)
p
ll[1,]
exp(ll[1,])
sum(exp(ll[1,]))
loadd(simu.betab.data_0.05_seed0_n1k)
sum(exp(ll[1,]))simu_fits
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
simu_fits_plan
loadd(simu.betab.data_0.05_seed0_n1k)
loadd(simu.betab.data_0.05_n1k_seed0)
simu_betab_plan
source(file.path("R", "setup.R"))
loadd(simu.betab.data_0.05_n1k_seed0)
loadd(simu.binom.fit_simu.betab.data_0.05_n1k_seed0)
ll <- extract(simu.binom.fit_simu.betab.data_0.05_n1k_seed0, "log_lik")$log_lik
y  <- simu.betab.data_0.05_n1k_seed0$y
k <- lapply(0:7, function(x)which(y==x))
k
RB <- function(ll_samp, k_which){
lapply(k_which,
function(x){
pk <- sum(exp(ll_samp[x]))
mk <- length(k_which)
sum(((mk - pk)/sqrt(pk))**2)
})
}
rm(yy)
rm(y)
k <- lapply(0:7, function(x)which(simu.betab.data_0.05_n1k_seed0$y==x))
k
RB(ll[1,], k)
RB(ll[1,], k) -> a
a
sum(a)
do.call(a, sum)
do.call(sum, a)
sum(unlist(a))
RB <- function(ll_samp, k_which){
do.call(sum,
lapply(k_which,
function(x){
pk <- sum(exp(ll_samp[x]))
mk <- length(k_which)
sum(((mk - pk)/sqrt(pk))**2)
})
)
}
(RB(ll[1,], k)
RB(ll[1,], k)
dim(ll)
lapply(nrow(ll), RB(ll[1,], k))
lapply(1:nrow(ll), function(x){RB(ll[x,], k)})
rb_post <- unlist(lapply(1:nrow(ll), function(x){RB(ll[x,], k)}))
rb_post
hist(rb_post)
hist(rb_post)
?qqplot
qchisq
qchisq(1)
qchisq(0, 1)
qchisq(0, 2)
qchisq(1, 2)
qchisq(0.5, 2)
qchisq(0.5, 6)
qchisq(1, 6)
qchisq(0.9, 6)
qchisq(0.9999, 6)
qchisq(0.9999999999999999, 6)
qchisq(0.99999999999999999999999999999999999999999999, 6)
qchisq(0.999999999999999999999999999999999999999999, 6)
qchisq(0.9999999999999999999999999999999999999, 6)
qchisq(0.9999999999999999999999999999999, 6)
qchisq(0.999999999999999999999999999, 6)
qchisq(0.9999999999999999999999, 6)
qchisq(0.9999999999999999, 6)
qchisq(0.99999999999999999, 6)
RB
