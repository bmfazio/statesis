source(file.path("R", "plan.R"))
whole_plan
whole_plan$target
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
config <- drake_config(whole_plan)
vis_drake_graph(config)
make(whole_plan, seed = 1991)
read_drake_seed()
clean(destroy = TRUE)
make(whole_plan, seed = 1991)
make(whole_plan, seed = 1991)
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loadd(endes.merged)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
5*10**2
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loo
loadd(simu.betab.fit_simu.betab.data_0.1_n500_seed4)
loo(simu.betab.fit_simu.betab.data_0.1_n500_seed4)
?loo
loo(simu.betab.fit_simu.betab.data_0.1_n500_seed4) -> a
a
a$estimates
a$estimates %>% typeof
a$estimates[1,]
a$estimates[1]
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
simu_betab_plan
config <- drake_config(whole_plan)
vis_drake_graph(config)
simu_fits_betab
simu_fits_betab_plan
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
simu_binom_loo_plan
simu_binom_loo_plan$target[1]
loadd(simu_binom_loo_plan$target[1])
looic_binom_simu.binom.fit_simu.betab.data_0.05_seed0
looic_binom_simu.binom.fit_simu.betab.data_0.05_seed0[3,]
looic_binom_simu.binom.fit_simu.betab.data_0.05_seed0$estimates
looic_binom_simu.binom.fit_simu.betab.data_0.05_seed0$estimates[3,1]
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
simu_binom_loo_plan$target
dput(simu_binom_loo_plan$target)
cat(simu_binom_loo_plan$target)
cat(paste(simu_binom_loo_plan$target,"\n"))
cat(paste(simu_betab_loo_plan$target,"\n"))
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loadd(looic_binom.betab_table)
looic_binom.betab_table
simu_binom_loo_pla n
simu_binom_loo_plan
simu_binom_loo_plan$target
loadd(simu_binom_loo_plan$target[1])
looic_binom_simu.binom.fit_simu.betab.data_0.05_seed0
simu_binom_loo_plan$target
simu_binom_loo_plan
simu_betab_loo_plan
loadd(simu_betab_loo_plan9
loadd(simu_betab_loo_plan)
(simu_betab_loo_plan)
loadd(simu.betab.fit_simu.betab.data_0.05_seed0)
loo(simu.betab.fit_simu.betab.data_0.05_seed0)
loadd(simu.betab.fit_simu.betab.data_0.05_seed1)
loo(simu.betab.fit_simu.betab.data_0.05_seed1)
loo(simu.betab.fit_simu.betab.data_0.05_seed1) -> a
a$pointwise
a$diagnostics
(simu.betab.fit_simu.betab.data_0.05_seed1)
library(shinystan)
launch_shinystan(simu.betab.fit_simu.betab.data_0.05_seed1)
??divergent
check_divergences(simu.betab.fit_simu.betab.data_0.05_seed1)
check_divergences(simu.betab.fit_simu.betab.data_0.05_seed1) -> a
a
get_divergent_iterations(simu.betab.fit_simu.betab.data_0.05_seed1)
get_num_divergent(simu.betab.fit_simu.betab.data_0.05_seed1)
get_divergent_iterations(simu.betab.fit_simu.betab.data_0.05_seed1)
simu_fits_binom_plan
get_num_divergent(simu.betab.fit_simu.betab.data_0.05_seed1)
?gather_plan
loo(simu.betab.fit_simu.betab.data_0.05_seed1) -> a
a$estimates
simu_fits_binom <- drake_plan(
simu.binom.fit =
sampling(binom.model,
data = data__,
chains = 1, iter = 2000),
simu.binom.loo = loo(simu.binom.fit)
)
simu_fits_binom_plan <- evaluate_plan(
plan = simu_fits_binom,
wildcard = "data__",
values = simu_betab_plan$target
)
simu_fits_binom_plan
tail(simu_fits_binom_plan)
simu_fits_binom <- drake_plan(
simu.binom.fit =
sampling(binom.model,
data = data__,
chains = 1, iter = 2000),
simu.binom.loodata__ = loo(simu.binom.fitdata__)
)
simu_fits_binom_plan <- evaluate_plan(
plan = simu_fits_binom,
wildcard = "data__",
values = simu_betab_plan$target
)
tail(simu_fits_binom_plan)
get_num_divergent()
a
a$estimates[3,1]
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
endes.fit_plan
simu_fits_plan
loadd(simu.binom.fit_simu.betab.data_0.05_seed0)
simu.binom.fit_simu.betab.data_0.05_seed0
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attributes()
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attributes() %>% names
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attr("model_name")
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attr("inits")
simu.binom.fit_simu.betab.data_0.05_seed0 %>% attr("sim")
attr(simu.binom.fit_simu.betab.data_0.05_seed0, "sim")$dims_oi
attr(simu.binom.fit_simu.betab.data_0.05_seed0, "sim")$dims_oi$log_lik
tab_looic_divergent <- function(fit){
data.frame(model = attr(fit, "model_name"),
N = attr(fit, "sim")$dims_oi$log_lik,
looic = loo(fit)$estimates[3,1],
divergent = get_num_divergent(fit))
}
simu.binom.fit_simu.betab.data_0.05_seed0 %>% tab_looic_divergent()
simu_fits_plan
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = targets, command = commands)
simu_looic
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
simu_looic
simu_fits_plan
simu_fits_plan[1,1]
simu_fits_plan$target[1]
loadd(simu_fits_plan$target[1])
simu.binom.fit_simu.betab.data_0.05_seed0
simu_fits_plan$target
simu_fits_plan$target
loo_tab_plan
simu_looic
simulate(1)
simulate(5)
?simulate(5)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = targets, command = commands)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
commands
simu_looic
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "safsad",
gather = "rbind"
)
loo_tab_plan
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
loo_tab_plan$command
gather_plan
simu_looi
simu_looic
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = commands, command = commands)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
gather_plan
gather_plan <- function (plan = NULL, target = "target", gather = "list")
{
command <- paste(plan$target, "=", plan$command)
command <- paste(command, collapse = ", ")
command <- paste0(gather, "(", command, ")")
tibble(target = target, command = command)
}
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
commands <- paste0("tab_looic_divergent(", simu_fits_plan$target, ")")
targets <- paste0("looic_", simu_fits_plan$target)
simu_looic <- data.frame(target = targets, command = commands)
loo_tab_plan <- gather_plan(
plan = simu_looic,
target = "looic_tab",
gather = "rbind"
)
loo_tab_plan
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loadd(looic_tab)
looic_tab
# HOLA HEY HEY:
#   Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
#   Me estaría faltando:
#     -Implementar efectos aleatorios
#     -Implementar los criterios de comparacion
#     -Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
loadd(looic_tab2)
(looic_tab2)
attributes(looic_tab2)
attributes(looic_tab2)$row.names
attributes(looic_tab2)$row.names <- NULL
(looic_tab2)
looic_tab2
loadd(looic_tab2)
(looic_tab2)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan, seed = 1991)
