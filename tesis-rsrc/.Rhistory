library(rio)
library(data.table)
library(magrittr)
library(survey)
getwd()
options(repos = c(getOption("repos"), rstan = "http://wiki.stan.googlecode.com/git/R")) install.packages('rstan', type = 'source')
options(repos = c(getOption("repos"), rstan = "http://wiki.stan.googlecode.com/git/R"))
install.packages('rstan', type = 'source')
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
7e
library(rstan)
70
`:D`
"`:D`"
20
19
library(rstan)
?sampling
sessionInfo()
source(file.path("R", "setup.R"))
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
setwd("/home/bmfazio/git-repos/tesis-pucpstat/tesis-rsrc")
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load("endes-betab")
sampling(betab.model, data = endes.data,
file = "output/endes.betab.fit2",
chains = 2, iter = 2000)
?samppling
?sampling
setwd("/home/bmfazio/git-repos/tesis-pucpstat/tesis-rsrc")
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load("endes-betab")
sampling(betab.model, data = endes.data,
sample_file = "output/endes.betab.fit2",
chains = 2, iter = 2000)
bbfit1 <- read.csv("output/endes.betab.fit2_1.csv", comment.char = "#")
library(data.table)
bbfit1 <- fread("output/endes.betab.fit2_1.csv", comment.char = "#")
?fread
bbfit1 <- fread("output/endes.betab.fit2_1.csv", nrows = 0)
bbfit1
bbfit1 <- fread("output/endes.betab.fit2_1.csv", nrows = 0, skip = "lp__")
bbfit1
colnames(bbfit1)
colnames(bbfit1)[1:16]
colnames(bbfit1)[1:17]
tail(colnames(bbfit1))
bbfit1 <- fread("output/endes.betab.fit2_1.csv", skip = "lp__", drop = 1:16)
bbfit1 <- fread("output/endes.betab.fit2_1.csv", skip = 1031, nrows = 1000, drop = 1:16)
bbfit1 <- fread("output/endes.betab.fit2_1.csv", skip = 1030, nrows = 1000, drop = 1:16)
bbfit1
bbfit1[1,1]
bb_lik <- fread("output/endes.betab.fit2_1.csv", skip = 1030, nrows = 1000, drop = 1:16)
rm(bbfit1)
library(loo)
install.packages("loo")
library(loo)
?loo
as.matrix(bb_lik)
typeof(as.matrix(bb_lik))
LLmat <- as.matrix(bb_lik)
rel_n_eff <- relative_eff(exp(LLmat))
rel_n_eff <- relative_eff(exp(LLmat), chain_id = 1)
rel_n_eff <- relative_eff(exp(LLmat), chain_id = rep(1,1000))
rel_n_eff
hist(rel_n_eff)
loo(LLmat, r_eff = rel_n_eff, cores = 2)
