make(plan)
plan
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
config <- drake_config(plan)
vis_drake_graph(config)
# Walkthrough: https://ropenscilabs.github.io/drake-manual/intro.html
# Slides: https://krlmlr.github.io/drake-pitch
# Code: drake_example("main") # nolint
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config(). # nolint
config <- drake_config(plan)
vis_drake_graph(config)
setwd("/home/bmfazio/git-repos/tutorial-drake/main")
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config(). # nolint
config <- drake_config(plan)
vis_drake_graph(config)
config <- drake_config(plan)
vis_drake_graph(config)
getwd()
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
a <- setwd(".")
a
?parse
parse(text="print('caca')")
eval(parse(text="print('caca')"))
eval(parse(text="1+1"))
eval(parse(text="getwd()"))
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
eval(parse(text="getwd()"))
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
?semi_join
endes.merged =
CSALUD01 %>%
left_join(REC0111, by = c("id.household", "id.hh.person")) %>%
left_join(RECH1, by = c("id.household", "id.hh.person")) %>%
left_join(RECH0, by = "id.household") %>%
left_join(RECH23, by ="id.household)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
?left_join
loadd(CSALUD01)
CSALUD01$id.household
CSALUD01$id.hh.person
loadd(REC0111)
REC0111$id.hh.person
CSALUD01$id.hh.person
CSALUD01
REC0111
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
load("endes.merged")
loadd(endes.merged)
endes.merged
mtcars
mtcars[1:3]
mtcars[1:3,]
mtcars[1:3,] -> a
mtcars[1:3,] -> b
a$mpg
attributes(a$mpg)
attributes(a$mpg) <- c(wombat="aaa")
attributes(a$mpg) <- list(wombat="aaa")
attributes(a$mpg)
attributes(b$mpg) <- list(wombot="bbb")
a %>% left_join(b, by="mpg")
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
a %>% left_join(b, by="mpg")
attributes(b$mpg) <- list(wombat="bbb")
a %>% left_join(b, by="mpg")
attributes(b$mpg) <- list(wombat="aaa")
a %>% left_join(b, by="mpg")
loadd(CSALUD01)
CSALUD01
CSALUD01 %>% attributes
CSALUD01$id.hh.person %>% attributes
load(REC0111)
loadd(REC0111)
REC0111$id.hh.person %>% attributes
# # The workflow plan data frame outlines what you are going to do.
plan <- drake_plan(
endesdir =
read.table(file_in("config.txt"), header = TRUE, sep = ";", stringsAsFactors = FALSE) %>%
filter(id == Sys.info()[c(1,4:6)] %>% paste(collapse = "|")) %>%
select(path) %>% unlist %>% file.path("inei","endes"),
# ineidir = file.path(datadir, "inei"),
# endesdir = file.path(ineidir, "endes"),
CSALUD01 =
file.path(endesdir,"2017","Modulo414","CSALUD01.sav") %>%
haven::read_sav(encoding = "latin1") %>%
select(
!!!c(id.household = "HHID",
id.hh.person = "QSNUMERO",
survey.weight = "PESO15_AMAS",
sex = "QSSEXO",
age = "QS23",
month = "QSINTM",
had.fruit  = "QS213U",
days.fruit = "QS213C",
had.juice  = "QS215U",
days.juice = "QS215C",
had.fsalad  = "QS217U",
days.fsalad = "QS217C",
had.vsalad  = "QS219U",
days.vsalad = "QS219C")
)
,
REC0111 =
file.path(endesdir,"2017","Modulo66","REC0111.SAV") %>%
haven::read_sav(encoding = "latin1") %>%
select(
!!!c(id.household = "hhid",
id.hh.person = "V003",
age = "V012",
residence.childhood = "V103",
residence.time      = "V104",
residence.last      = "V105")
),
RECH1 =
file.path(endesdir,"2017","Modulo64","RECH1.SAV") %>%
haven::read_sav(encoding = "latin1") %>%
select(
!!!c(id.household = "HHID",
id.hh.person = "HVIDX",
education = "HV106")
),
RECH0 =
file.path(endesdir,"2017","Modulo64","RECH0.SAV") %>%
haven::read_sav(encoding = "latin1") %>%
select(
!!!c(id.household = "HHID",
loc.region = "HV023",
stratum.area = "HV022",
psu = "HV021")
),
RECH23 =
file.path(endesdir,"2017","Modulo65","RECH23.SAV") %>%
haven::read_sav(encoding = "latin1") %>%
select(
!!!c(id.household = "HHID",
loc.natural = "SHREGION",
loc.province = "SHPROVIN",
loc.district = "SHDISTRI",
wealth.quintile = "HV270",
wealth.index = "HV271")
),
endes.merged =
CSALUD01 %>%
left_join(REC0111, by = c("id.household", "id.hh.person")) %>%
left_join(RECH1, by = c("id.household", "id.hh.person")) %>%
left_join(RECH0, by = "id.household") %>%
left_join(RECH23, by ="id.household")
)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(CSALUD01)
loadd(REC0111)
loadd(endes.merged)
endes.merged
endes.merged[,c("age.x","age.y")]
endes.merged$age.x ==  endes.merged$age.y
endes.merged$age.x ==  endes.merged$age.y %>% table
(endes.merged$age.x ==  endes.merged$age.y) %>% table
endes.merged[(endes.merged$age.x !=  endes.merged$age.y), c("age.x", "age.y")]
endes.merged[(endes.merged$age.x !=  endes.merged$age.y) & !is.na(age.y) , c("age.x", "age.y")]
endes.merged[(endes.merged$age.x !=  endes.merged$age.y) & !is.na(endes.merged$age.y) , c("age.x", "age.y")]
endes.merged
endes.merged
endes.merged$residence.time
endes.merged$residence.time[3]
endes.merged$residence.time %>% attributes()
endes.merged
endes.merged$had.fruit
endes.merged$had.fruit %>% table
endes.merged %>% subset(had.fruit == 8)
endes.merged %>% subset(had.fruit == 8) %>% select(days.fruit)
endes.merged %>% subset(had.fruit == 8) %>% select(days.fruit) %>% table
make(plan)
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged$residence.childhood
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged$residence.childhood
endes.merged$residence.childhood %>% putlabel
endes.merged
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged
endes.merged
?replace
replace(1:3, TRUE, 4:6)
replace(1:3, TRUE, letters[1:3])
str(endes.merged)
endes.merged[,1:3]
endes.merged[,1:10]
endes.merged[,10:14]
endes.merged[,10:13]
endes.merged[,10:12]
endes.merged[,10:11]
replace(1:3, TRUE, letters[1:3])
endes.merged$residence.childhood
endes.merged$residence.childhood[1]
is.numeric(factor:13)
is.numeric(factor(1:3))
is.character(factor:13)
is.character(factor(1:3))
is.factor(factor(1:3))
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged[,10]
endes.merged[,10:15]
endes.merged[,10:19]
endes.merged[,10:20]
endes.merged[,10:21]
endes.merged[,10:22]
endes.merged[,10:23]
endes.merged[,10:22]
boxplot(endes.merged$wealth.index ~ endes.merged$wealth.quintile)
eval("print()")
parse("print('aaa')")
parse(text="print('aaa')")
eval(parse(text="print('aaa')"))
fun1 = function(df = df1, var = "var1"){
plot(df1, eval(parse(text=var)))
}
a <- 1:100
a <- 1:nrow(mtcars)
mtcars
fun1 = function(df = df1, var = "var1"){
plot(df[,1], eval(parse(text=var)))
}
a <- 1:nrow(mtcars)
fun1(mtcars, "a")
fun1 = function(df = df1, var = "var1"){
plot(df[,1], eval(parse(text=var)))
}
var1 <- 1:nrow(mtcars)
fun1(mtcars)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
loadd(endes.merged)
endes.data = # seria ideal armar una funcion que me construya esto
list(
N = nrow(endes.merged),
Kx = 4,
Kz = 4,
n = rep(7, nrow(endes.merged)),
y = endes.merged$days.fruit,
x =
matrix(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
),
z =
matrix(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
)
)
endes.merged$wealth.index
endes.merged$wealth.index %>% length
endes.data = # seria ideal armar una funcion que me construya esto
list(
N = nrow(endes.merged),
Kx = 4,
Kz = 4,
n = rep(7, nrow(endes.merged)),
y = endes.merged$days.fruit,
x =
matrix(
c(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
), ncol = 4
),
z =
matrix(
c(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
), ncol = 4
)
)
1
ls
ls()
# See the full tutorial at
# https://ropenscilabs.github.io/drake-manual/packages.html.
source("R/packages.R")  # Load all the packages you need.
source("R/functions.R") # Load all the functions into your environment.
source("R/plan.R")      # Build your workflow plan data frame.
# Now, your functions and workflow plan should be in your environment.
ls()
# Optionally plot the graph of your workflow.
# config <- drake_config(whole_plan) # nolint
# vis_drake_graph(config)         # nolint
?subset
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
?sampling
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param")
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)))
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)))
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)), chains = 1, iter = 1)
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)), chains = 1, iter = 1)
eibb.sim(N = 10**2, n = 10, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5) -> a
a$y
a$y == n
a$y == a$n
n
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 10**2, n = 10, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 1, iter = 1)
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 10**2, n = 10, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 2, iter = 500)
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 500, n = 5, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 2, iter = 1000)
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 500, n = 5, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 2, iter = 1000)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
#loadd(endes.merged)
# loadd(simu.data)
# hist(simu.data$y)
#loadd(simu.bin.fit);simu.bin.fit
#loadd(simu.bin.data);hist(simu.bin.data$y)
#loadd(simu.bb.fit);simu.bb.fit
loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
loadd(simu.binom.fit_simu.betab.data);simu.binom.fit_simu.betab.data
loadd(simu.binom.fit_simu.eibeb.data);simu.binom.fit_simu.eibeb.data
#
# loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
loadd(simu.betab.fit_simu.betab.data);simu.betab.fit_simu.betab.data
loadd(simu.betab.fit_simu.eibeb.data);simu.betab.fit_simu.eibeb.data
#
# loadd(simu.eibeb.fit_simu.binom.data);simu.eibeb.fit_simu.binom.data
# loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
loadd(simu.eibeb.fit_simu.eibeb.data);simu.eibeb.fit_simu.eibeb.data
loadd(simu.eibeb.fit_simu.binom.data);simu.eibeb.fit_simu.binom.data
loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
loadd(simu.betab.fit_simu.betab.data);simu.betab.fit_simu.betab.data
loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
