endes.merged
endes.merged
endes.merged$residence.time
endes.merged$residence.time[3]
endes.merged$residence.time %>% attributes()
endes.merged
endes.merged$had.fruit
endes.merged$had.fruit %>% table
endes.merged %>% subset(had.fruit == 8)
endes.merged %>% subset(had.fruit == 8) %>% select(days.fruit)
endes.merged %>% subset(had.fruit == 8) %>% select(days.fruit) %>% table
make(plan)
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged$residence.childhood
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged$residence.childhood
endes.merged$residence.childhood %>% putlabel
endes.merged
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged
endes.merged
?replace
replace(1:3, TRUE, 4:6)
replace(1:3, TRUE, letters[1:3])
str(endes.merged)
endes.merged[,1:3]
endes.merged[,1:10]
endes.merged[,10:14]
endes.merged[,10:13]
endes.merged[,10:12]
endes.merged[,10:11]
replace(1:3, TRUE, letters[1:3])
endes.merged$residence.childhood
endes.merged$residence.childhood[1]
is.numeric(factor:13)
is.numeric(factor(1:3))
is.character(factor:13)
is.character(factor(1:3))
is.factor(factor(1:3))
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged[,10]
endes.merged[,10:15]
endes.merged[,10:19]
endes.merged[,10:20]
endes.merged[,10:21]
endes.merged[,10:22]
endes.merged[,10:23]
endes.merged[,10:22]
boxplot(endes.merged$wealth.index ~ endes.merged$wealth.quintile)
eval("print()")
parse("print('aaa')")
parse(text="print('aaa')")
eval(parse(text="print('aaa')"))
fun1 = function(df = df1, var = "var1"){
plot(df1, eval(parse(text=var)))
}
a <- 1:100
a <- 1:nrow(mtcars)
mtcars
fun1 = function(df = df1, var = "var1"){
plot(df[,1], eval(parse(text=var)))
}
a <- 1:nrow(mtcars)
fun1(mtcars, "a")
fun1 = function(df = df1, var = "var1"){
plot(df[,1], eval(parse(text=var)))
}
var1 <- 1:nrow(mtcars)
fun1(mtcars)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(plan)
vis_drake_graph(config)
loadd(endes.merged)
endes.merged
endes.merged
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(plan)
loadd(endes.merged)
endes.data = # seria ideal armar una funcion que me construya esto
list(
N = nrow(endes.merged),
Kx = 4,
Kz = 4,
n = rep(7, nrow(endes.merged)),
y = endes.merged$days.fruit,
x =
matrix(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
),
z =
matrix(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
)
)
endes.merged$wealth.index
endes.merged$wealth.index %>% length
endes.data = # seria ideal armar una funcion que me construya esto
list(
N = nrow(endes.merged),
Kx = 4,
Kz = 4,
n = rep(7, nrow(endes.merged)),
y = endes.merged$days.fruit,
x =
matrix(
c(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
), ncol = 4
),
z =
matrix(
c(
rep(1, nrow(endes.merged)),
endes.merged$wealth.index,
endes.merged$sex,
endes.merged$stratum.area
), ncol = 4
)
)
1
ls
ls()
# See the full tutorial at
# https://ropenscilabs.github.io/drake-manual/packages.html.
source("R/packages.R")  # Load all the packages you need.
source("R/functions.R") # Load all the functions into your environment.
source("R/plan.R")      # Build your workflow plan data frame.
# Now, your functions and workflow plan should be in your environment.
ls()
# Optionally plot the graph of your workflow.
# config <- drake_config(whole_plan) # nolint
# vis_drake_graph(config)         # nolint
?subset
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
?sampling
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param")
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)))
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)))
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)), chains = 1, iter = 1)
stan(file = "Stan/min-vector-test.stan", algorithm = "Fixed_param", data = list(N=3,n=c(2,2,2),y=c(0,1,2)), chains = 1, iter = 1)
eibb.sim(N = 10**2, n = 10, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5) -> a
a$y
a$y == n
a$y == a$n
n
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 10**2, n = 10, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 1, iter = 1)
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 10**2, n = 10, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 2, iter = 500)
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 500, n = 5, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 2, iter = 1000)
stan(file = "Stan/eibb-regression-model.stan",
data = eibb.sim(N = 500, n = 5, bx = c(0, 0.5, -0.5), rho = 0.2, s = 0.5),
chains = 2, iter = 1000)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
#loadd(endes.merged)
# loadd(simu.data)
# hist(simu.data$y)
#loadd(simu.bin.fit);simu.bin.fit
#loadd(simu.bin.data);hist(simu.bin.data$y)
#loadd(simu.bb.fit);simu.bb.fit
loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
loadd(simu.binom.fit_simu.betab.data);simu.binom.fit_simu.betab.data
loadd(simu.binom.fit_simu.eibeb.data);simu.binom.fit_simu.eibeb.data
#
# loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
loadd(simu.betab.fit_simu.betab.data);simu.betab.fit_simu.betab.data
loadd(simu.betab.fit_simu.eibeb.data);simu.betab.fit_simu.eibeb.data
#
# loadd(simu.eibeb.fit_simu.binom.data);simu.eibeb.fit_simu.binom.data
# loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
loadd(simu.eibeb.fit_simu.eibeb.data);simu.eibeb.fit_simu.eibeb.data
loadd(simu.eibeb.fit_simu.binom.data);simu.eibeb.fit_simu.binom.data
loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
loadd(simu.betab.fit_simu.betab.data);simu.betab.fit_simu.betab.data
loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
sample(100)
?sample
?sample
sample(100)
?sample
sample(10,2)
sample(10,3)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
config <- drake_config(whole_plan)
vis_drake_graph(config)
loadd(endes.eibeb.fit)
endes.eibeb.fit
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
config <- drake_config(whole_plan)
vis_drake_graph(config)
loadd(endes.binom.fit)
endes.binom.fit
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
loadd(endes.eibeb.fit)
endes.eibeb.fit
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
install.packages("shinystan")
library(shinystan)
launch_shinystan_demo()
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
#loadd(endes.merged)
loadd(endes.eibeb.fit)
endes.eibeb.fit
loadd(endes.binom.fit)
loadd(endes.betab.fit);endes.betab.fit
loadd(endes.binom.fit);endes.binom.fit
endes.eibeb.fit
shinystan::launch_shinystan(endes.eibeb.fit)
sizeof
object.size()(endes.eibeb.fit)
object.size(endes.eibeb.fit)
object.size(endes.eibeb.fit)/1024
HOLA HEY HEY:
Ya tengo el "simulador" funcional, aunque le faltan los efectos aleatorios.
Me estaría faltando:
-Implementar efectos aleatorios
-Implementar los criterios de comparacion
-Ajustar con datos de la ENDES
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
#loadd(endes.merged)
# loadd(simu.data)
# hist(simu.data$y)
#loadd(simu.bin.fit);simu.bin.fit
#loadd(simu.bin.data);hist(simu.bin.data$y)
#loadd(simu.bb.fit);simu.bb.fit
# loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
# loadd(simu.binom.fit_simu.betab.data);simu.binom.fit_simu.betab.data
# loadd(simu.binom.fit_simu.eibeb.data);simu.binom.fit_simu.eibeb.data
# #
# loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
# loadd(simu.betab.fit_simu.betab.data);simu.betab.fit_simu.betab.data
# loadd(simu.betab.fit_simu.eibeb.data);simu.betab.fit_simu.eibeb.data
# #
# loadd(simu.eibeb.fit_simu.binom.data);simu.eibeb.fit_simu.binom.data
# loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
# loadd(simu.eibeb.fit_simu.eibeb.data);simu.eibeb.fit_simu.eibeb.data
loadd(endes.eibeb.fit);endes.eibeb.fit
loadd(endes.betab.fit);endes.betab.fit
loadd(endes.binom.fit);endes.binom.fit
shinystan::launch_shinystan(endes.eibeb.fit)
object.size(endes.eibeb.fit)/1024
object.size(endes.eibeb.fit)
object.size(endes.eibeb.fit)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
#loadd(endes.merged)
# loadd(simu.data)
# hist(simu.data$y)
#loadd(simu.bin.fit);simu.bin.fit
#loadd(simu.bin.data);hist(simu.bin.data$y)
#loadd(simu.bb.fit);simu.bb.fit
# loadd(simu.binom.fit_simu.binom.data);simu.binom.fit_simu.binom.data
# loadd(simu.binom.fit_simu.betab.data);simu.binom.fit_simu.betab.data
# loadd(simu.binom.fit_simu.eibeb.data);simu.binom.fit_simu.eibeb.data
# #
# loadd(simu.betab.fit_simu.binom.data);simu.betab.fit_simu.binom.data
# loadd(simu.betab.fit_simu.betab.data);simu.betab.fit_simu.betab.data
loadd(endes.eibeb.fit);endes.eibeb.fit
shinystan::launch_shinystan(endes.eibeb.fit)
shinystan::launch_shinystan(endes.eibeb.fit)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# drake makefile
# Load our packages and supporting functions into our session.
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
loadd(simu.eibeb.fit_simu.eibeb.data);simu.eibeb.fit_simu.eibeb.data
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
source(file.path("R", "setup.R"))
# Create the `drake` plan that outlines the work we are going to do.
source(file.path("R", "plan.R"))
#source(file.path("R", "stanfail.R"))
# Run your work with make().
make(whole_plan)
# See also loadd(), readd(), vis_drake_graph(), and drake_config().
config <- drake_config(whole_plan)
vis_drake_graph(config)
loadd(simu.eibeb.fit_simu.eibeb.data);simu.eibeb.fit_simu.eibeb.data
shinystan::launch_shinystan(simu.eibeb.fit_simu.eibeb.data)
loadd(simu.eibeb.fit_simu.betab.data);simu.eibeb.fit_simu.betab.data
shinystan::launch_shinystan(simu.eibeb.fit_simu.betab.data)
loadd(simu.eibeb.fit_simu.binom.data);simu.eibeb.fit_simu.binom.data
shinystan::launch_shinystan(simu.eibeb.fit_simu.binom.data)
