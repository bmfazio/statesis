// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace eibb_regression_model_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/home/bmfazio/git-repos/tesis-pucpstat/tesis-rsrc/Stan/eibb-regression-model.stan");
    reader.add_event(75, 73, "end", "/home/bmfazio/git-repos/tesis-pucpstat/tesis-rsrc/Stan/eibb-regression-model.stan");
    return reader;
}

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
cumu_norm(const T0__& mu,
              const T1__& s, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        validate_non_negative_index("p_vec", "3", 3);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  p_vec(static_cast<Eigen::VectorXd::Index>(3));
        (void) p_vec;  // dummy to suppress unused var warning

        stan::math::initialize(p_vec, DUMMY_VAR__);
        stan::math::fill(p_vec,DUMMY_VAR__);


        current_statement_begin__ = 8;
        stan::model::assign(p_vec, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    Phi((-(mu) / s)), 
                    "assigning variable p_vec");
        current_statement_begin__ = 9;
        stan::model::assign(p_vec, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    (Phi(((1 - mu) / s)) - Phi((-(mu) / s))), 
                    "assigning variable p_vec");
        current_statement_begin__ = 10;
        stan::model::assign(p_vec, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    (1 - Phi(((1 - mu) / s))), 
                    "assigning variable p_vec");
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(p_vec);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct cumu_norm_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,1>
    operator()(const T0__& mu,
              const T1__& s, std::ostream* pstream__) const {
        return cumu_norm(mu, s, pstream__);
    }
};

class eibb_regression_model_model : public prob_grad {
private:
    int N;
    int Kx;
    int Kz;
    vector<int> n;
    vector<int> y;
    matrix_d x;
    matrix_d z;
    vector<double> ymin;
    vector<double> ymax;
public:
    eibb_regression_model_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    eibb_regression_model_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "eibb_regression_model_model_namespace::eibb_regression_model_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "Kx", "int", context__.to_vec());
            Kx = int(0);
            vals_i__ = context__.vals_i("Kx");
            pos__ = 0;
            Kx = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "Kz", "int", context__.to_vec());
            Kz = int(0);
            vals_i__ = context__.vals_i("Kz");
            pos__ = 0;
            Kz = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("n", "N", N);
            context__.validate_dims("data initialization", "n", "int", context__.to_vec(N));
            validate_non_negative_index("n", "N", N);
            n = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            size_t n_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < n_limit_0__; ++i_0__) {
                n[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("x", "N", N);
            validate_non_negative_index("x", "Kx", Kx);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(N,Kx));
            validate_non_negative_index("x", "N", N);
            validate_non_negative_index("x", "Kx", Kx);
            x = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(Kx));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_m_mat_lim__ = N;
            size_t x_n_mat_lim__ = Kx;
            for (size_t n_mat__ = 0; n_mat__ < x_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < x_m_mat_lim__; ++m_mat__) {
                    x(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("z", "N", N);
            validate_non_negative_index("z", "Kz", Kz);
            context__.validate_dims("data initialization", "z", "matrix_d", context__.to_vec(N,Kz));
            validate_non_negative_index("z", "N", N);
            validate_non_negative_index("z", "Kz", Kz);
            z = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(Kz));
            vals_r__ = context__.vals_r("z");
            pos__ = 0;
            size_t z_m_mat_lim__ = N;
            size_t z_n_mat_lim__ = Kz;
            for (size_t n_mat__ = 0; n_mat__ < z_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < z_m_mat_lim__; ++m_mat__) {
                    z(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 17;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 18;
            check_greater_or_equal(function__,"Kx",Kx,1);
            current_statement_begin__ = 19;
            check_greater_or_equal(function__,"Kz",Kz,1);
            current_statement_begin__ = 21;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"n[k0__]",n[k0__],1);
            }
            current_statement_begin__ = 22;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            }
            current_statement_begin__ = 24;
            current_statement_begin__ = 25;
            // initialize data variables
            current_statement_begin__ = 29;
            validate_non_negative_index("ymin", "N", N);
            ymin = std::vector<double>(N,double(0));
            stan::math::fill(ymin,DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("ymax", "N", N);
            ymax = std::vector<double>(N,double(0));
            stan::math::fill(ymax,DUMMY_VAR__);

            current_statement_begin__ = 32;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 33;
                stan::model::assign(ymin, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1 - min(stan::math::to_row_vector(stan::math::array_builder<double >().add(1).add(get_base1(y,i,"y",1)).array()))), 
                            "assigning variable ymin");
                current_statement_begin__ = 34;
                stan::model::assign(ymax, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (1 - min(stan::math::to_row_vector(stan::math::array_builder<double >().add(1).add((get_base1(n,i,"n",1) - get_base1(y,i,"y",1))).array()))), 
                            "assigning variable ymax");
            }

            // validate transformed data
            current_statement_begin__ = 29;
            current_statement_begin__ = 30;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 39;
            validate_non_negative_index("bx", "Kx", Kx);
            num_params_r__ += Kx;
            current_statement_begin__ = 40;
            validate_non_negative_index("bz", "Kz", Kz);
            num_params_r__ += Kz;
            current_statement_begin__ = 42;
            ++num_params_r__;
            current_statement_begin__ = 43;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~eibb_regression_model_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("bx")))
            throw std::runtime_error("variable bx missing");
        vals_r__ = context__.vals_r("bx");
        pos__ = 0U;
        validate_non_negative_index("bx", "Kx", Kx);
        context__.validate_dims("initialization", "bx", "vector_d", context__.to_vec(Kx));
        vector_d bx(static_cast<Eigen::VectorXd::Index>(Kx));
        for (int j1__ = 0U; j1__ < Kx; ++j1__)
            bx(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(bx);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bx: ") + e.what());
        }

        if (!(context__.contains_r("bz")))
            throw std::runtime_error("variable bz missing");
        vals_r__ = context__.vals_r("bz");
        pos__ = 0U;
        validate_non_negative_index("bz", "Kz", Kz);
        context__.validate_dims("initialization", "bz", "vector_d", context__.to_vec(Kz));
        vector_d bz(static_cast<Eigen::VectorXd::Index>(Kz));
        for (int j1__ = 0U; j1__ < Kz; ++j1__)
            bz(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(bz);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bz: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bx;
            (void) bx;  // dummy to suppress unused var warning
            if (jacobian__)
                bx = in__.vector_constrain(Kx,lp__);
            else
                bx = in__.vector_constrain(Kx);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bz;
            (void) bz;  // dummy to suppress unused var warning
            if (jacobian__)
                bz = in__.vector_constrain(Kz,lp__);
            else
                bz = in__.vector_constrain(Kz);

            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lb_constrain(0,lp__);
            else
                rho = in__.scalar_lb_constrain(0);

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 47;
            local_scalar_t__ mu_beta;
            (void) mu_beta;  // dummy to suppress unused var warning

            stan::math::initialize(mu_beta, DUMMY_VAR__);
            stan::math::fill(mu_beta,DUMMY_VAR__);
            current_statement_begin__ = 48;
            local_scalar_t__ mu_norm;
            (void) mu_norm;  // dummy to suppress unused var warning

            stan::math::initialize(mu_norm, DUMMY_VAR__);
            stan::math::fill(mu_norm,DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("p", "3", 3);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  p(static_cast<Eigen::VectorXd::Index>(3));
            (void) p;  // dummy to suppress unused var warning

            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p,DUMMY_VAR__);


            current_statement_begin__ = 52;
            lp_accum__.add(normal_log<propto__>(bx, 0, 5));
            current_statement_begin__ = 54;
            lp_accum__.add(cauchy_log<propto__>(get_base1(bz,1,"bz",1), 0.5, 5));
            current_statement_begin__ = 55;
            for (int i = 2; i <= Kz; ++i) {

                current_statement_begin__ = 56;
                lp_accum__.add(normal_log<propto__>(get_base1(bz,i,"bz",1), 0, 5));
            }
            current_statement_begin__ = 59;
            lp_accum__.add(cauchy_log<propto__>(rho, 0, 2));
            current_statement_begin__ = 60;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 4));
            current_statement_begin__ = 62;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 63;
                stan::math::assign(mu_beta, inv_logit(multiply(get_base1(x,i,"x",1),bx)));
                current_statement_begin__ = 64;
                stan::math::assign(mu_norm, multiply(get_base1(z,i,"z",1),bz));
                current_statement_begin__ = 66;
                stan::math::assign(p, cumu_norm(mu_norm,sigma, pstream__));
                current_statement_begin__ = 68;
                lp_accum__.add(stan::math::log((((get_base1(ymin,i,"ymin",1) * get_base1(p,1,"p",1)) + (get_base1(ymax,i,"ymax",1) * get_base1(p,3,"p",1))) + (get_base1(p,2,"p",1) * stan::math::exp(beta_binomial_log(get_base1(y,i,"y",1),get_base1(n,i,"n",1),(mu_beta / rho),((1 - mu_beta) / rho)))))));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("bx");
        names__.push_back("bz");
        names__.push_back("rho");
        names__.push_back("sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Kx);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kz);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "eibb_regression_model_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d bx = in__.vector_constrain(Kx);
        vector_d bz = in__.vector_constrain(Kz);
        double rho = in__.scalar_lb_constrain(0);
        double sigma = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < Kx; ++k_0__) {
            vars__.push_back(bx[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Kz; ++k_0__) {
            vars__.push_back(bz[k_0__]);
            }
        vars__.push_back(rho);
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "eibb_regression_model_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= Kx; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Kz; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bz" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= Kx; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bx" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Kz; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bz" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef eibb_regression_model_model_namespace::eibb_regression_model_model stan_model;

